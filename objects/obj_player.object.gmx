<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Physics Variables

// grav (number, constant) - Player gravity
grav = 0.5;

// spd (number, constant) - Player Horizontal Moving Speed
spd = 4;

// jspd (number, constant) - Jump Speed
jspd = 9;

// hspd (number, variable) - Horizontal Speed
hspd = 0;

// vspd (number, variable) - Vertical Speed
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Text Variables

// input_text (string, variable) - Text entered to player
input_text = "";

// is_typing (boolean, variable) - Typing mode
is_typing = false;

// text_toggle_key (key, constant) - Key to toggle typing
text_toggle_key = vk_enter;

// depth (number, constant) - Object depth (lower = appear on top)
depth = -9998;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize GUI / Player Stats

// spell_one (spell, variable) - Spell Slot One
spell_one = Spell.NONE;
spell_one_data = get_spell_data(spell_one);

// spell_two (spell, variable) - Spell Slot Two
spell_two = Spell.NONE;
spell_two_data = get_spell_data(spell_two);

// spell_three (spell, variable) - Spell Slot Three
spell_three = Spell.NONE;
spell_three_data = get_spell_data(spell_three);

// hp (int, variable) - Current HP
hp = 20;

// max_hp (int, variable) - Max HP
max_hp = 20;

// hurt_invincibility (boolean, variable) - Whether the player is currently invincible from hurt buffer
hurt_invincibility = false;

// hurt_delay (int, constant) - Ticks invincible
hurt_delay = 60;

// current_ammo (int, variable) - Current ammunition of Spell One
current_ammo = 0;

// max_ammo (int, variable) - Max ammunition of Spell One
max_ammo = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize misc.

texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurt_invincibility = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear text

input_text = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform physics

var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check(vk_alt) or keyboard_check(vk_up);

// Check for ground
if (place_meeting(x, y+1, obj_solid)) {
    vspd = 0;
    
    // Jumping
    if (jkey) {
         vspd = -jspd;
    }
} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;
    }
}

// Moving right
if (rkey) {
    hspd = spd;
}

// Moving left
if (lkey) {
    hspd = -spd;
}

// Check if player is not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    hspd = 0;
}

// Horizontal collisions
// If the player is reaching a wall, x+1 until it reaches the edge
if (place_meeting(x+hspd, y, obj_solid)) {
    while(!place_meeting(x+sign(hspd), y, obj_solid)) {
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collisions
// If the player is reaching a wall, y+1 until it reaches the edge
if (place_meeting(x, y+vspd, obj_solid)) {
    while(!place_meeting(x, y+sign(vspd), obj_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move hertically
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interpret input_text

//Check spells
spell = get_spell(input_text);

if (spell != Spell.NONE) {
    spell_data = get_spell_data(spell);
    player_add_spell(spell_data[0], "&lt;SYSTEM&gt; " + string_upper(spell_data[1]) + " Activated.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hurt_invincibility == false) {
    hp--;
    hurt_invincibility = true;
    alarm[1] = hurt_delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI Bar Display

// Skill Slots
var horizontal_offset = 32;
var vertical_offset = 32;
var spell_horizontal_gap = 8;

var spell_one_x = horizontal_offset;
var spell_two_x = horizontal_offset + sprite_get_width(spr_hp_bar) + spell_horizontal_gap;
var spell_three_x = 2 * horizontal_offset + sprite_get_width(spr_hp_bar) + 2 * spell_horizontal_gap;

draw_sprite(spr_skill_container, 0, spell_one_x, vertical_offset);
draw_sprite(spr_skill_container, 0, spell_two_x, vertical_offset); 
draw_sprite(spr_skill_container, 0, spell_three_x, vertical_offset);

if (spell_one != Spell.NONE) {
    draw_sprite(spell_one_data[3], 0, spell_one_x + 2, vertical_offset + 2);
}

if (spell_two != Spell.NONE) {
    draw_sprite(spell_two_data[3], 0, spell_two_x + 2, vertical_offset + 2);
}

if (spell_three != Spell.NONE) {
    draw_sprite(spell_three_data[3], 0, spell_three_x + 2, vertical_offset + 2);

}

// HP Bar Display
draw_set_font(fnt_gui);
draw_set_halign(fa_right);
draw_sprite(spr_hp_bar, 0, horizontal_offset + 2, vertical_offset + 40);
draw_text_shadow(horizontal_offset + 2 + 44, vertical_offset + 40, string(hp),c_white);

// HP Display
var hp_length = (hp / max_hp) * 76;

draw_set_color($3F1AEB);
if (hp &gt; 0) {
    draw_rectangle(horizontal_offset + 51, vertical_offset + 44, horizontal_offset + 51 + hp_length, vertical_offset + 51, false);
}
 
//draw_text_shadow(horizontal_offset + 2, vertical_offset + 40 + 16, "MP: ", c_white);
draw_set_font(fnt_main);

// Ammo Display

draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text Display
draw_set_halign(fa_center);
draw_set_color(c_black);
draw_text(x+8, y - 24, input_text);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute spell

switch (spell_one) {

case Spell.BOLT:
    pass_to_console("&lt;SYSTEM&gt; Used the BOLT spell!");
    break;

case Spell.CLAW:
    pass_to_console("&lt;SYSTEM&gt; Used the CLAW spell!");
    break;

default:
    break;
}

player_remove_spell();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Typing

is_typing = !is_typing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>6,7</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
