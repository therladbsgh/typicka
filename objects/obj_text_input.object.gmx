<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

text = "";
//enabled_keys = "ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 À½»ÛÝÜºÞ¼¾¿";
draw_set_font(fnt_main);
blink = true;
blink_speed = 30;
alarm[0] = blink_speed;
max_string_length = 55;
key_hold_delay = 15;
current_held_key = "";
depth=-9999;

console_one = "";
console_two = "";
console_three = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear console

console_one = "";
console_two = "";
console_three = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var back_pressed = keyboard_check(vk_backspace);
var key_pressed = keyboard_check(current_held_key);
var key_used = current_held_key;

if (back_pressed) {
    alarm[1] = 3;
    
    switch (string_char_at(text, string_length(text))) {
    case "#":
        text = string_copy(text, 0, string_length(text) - 2);
        break;
    default:
        text = string_copy(text, 0, string_length(text) - 1);
        break;
    }
}

if (key_pressed and !back_pressed) {
    alarm[1] = 3
    
    switch(keyboard_key) {
    case vk_lshift:
    case vk_lcontrol:
    case vk_lalt:
    case vk_rshift:
    case vk_rcontrol:
    case vk_ralt:
    case vk_tab:
    case vk_space:
    case vk_enter:
    case vk_f1:
    case vk_f2:
    case vk_f3:
    case vk_f4:
    case vk_f5:
    case vk_f6:
    case vk_f7:
    case vk_f8:
    case vk_f9:
    case vk_f10:
    case vk_f11:
    case vk_f12:
    case vk_up:
    case vk_down:
    case vk_left:
    case vk_right:
        break;

    default:
        if ((string_length(text) &lt; max_string_length)) {
            switch (string_char_at(text, string_length(text))) {
            case "#":
                text += "\#";
                break;
            default:
                text += keyboard_lastchar;
                break;
            }
        break;
    }
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blink = !blink;
alarm[0] = blink_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hacky way to ensure keyboard_string == text

if (keyboard_string != text) {
    keyboard_string = text;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle blinking

if (obj_player.is_typing = false) {
    blink = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw text, blinker and overlay

// Initialization
draw_set_font(fnt_text_bar);

// Length and height of the font
var length = string_width(text);
var height = string_height("A");

// x and y locations of the text
var text_x = 8
var text_y = display_get_gui_height() - 8 - height;

// Draw overlay
if (obj_player.is_typing) {
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(text_x-2, text_y - 2, display_get_gui_width() - text_x + 2, text_y + height + 2, false);
    draw_set_alpha(1);
}

// Draw text
draw_set_color(c_white);
draw_text(text_x, text_y, text);

// Draw console
draw_text(text_x, text_y - 3 * height, console_one);
draw_text(text_x, text_y - 2 * height - 1, console_two);
draw_text(text_x, text_y - height - 2, console_three);

// Draw blinker
if blink {
    draw_line(text_x + length, text_y, text_x + length, text_y + height);
}

// Remove font
draw_set_font(fnt_main);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check Key Presses

/* Checking is slow, and disrupts the flow of typing (especially when typing 
   fast.) To ensure speed, we just make the text what it is typed 
   immediately, then check to see if there are any illegal words.
*/


if (obj_player.is_typing) {

    // Set blinking
    if (keyboard_key != vk_up and keyboard_key != vk_down and keyboard_key != vk_left and keyboard_key != vk_right) {
        blink = true;
        alarm[0] = blink_speed;
    }
    
    current_held_key = keyboard_key;
    alarm[1] = key_hold_delay;
    
    // Max string length, and remove keyboard_string's backspace handling
    if ((string_length(text) &lt; max_string_length) and (!keyboard_check(vk_backspace))) {
        switch (keyboard_lastchar) {
        case "#":
            // Replace keyboard_string's pound handling
            text += "\#";
            break;
        default:
            text = keyboard_string;
            break;
        }
    }
    
} else {

    // Do work when player is done typing
    if (text != "") {
        with (obj_player) {
            input_text = obj_text_input.text;
            alarm[0] = 180;
        }
        text = "";
    }
}

// Special character (e.g. backspace) handling
if (!keyboard_check(vk_control) and obj_player.is_typing) {
    switch (keyboard_key) {
        case vk_backspace:
            switch (string_char_at(text, string_length(text))) {
                case "#":
                    text = string_copy(text, 0, string_length(text) - 2);
                    break;
                default:
                    text = string_copy(text, 0, string_length(text) - 1);
                    break;
            }
            break;
        
        case vk_escape:
            text = "";
            with (obj_player) {
                is_typing = false;
            }
            break;
            
        default:
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
